name: C++ Build on Multiple Platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            clang \
            cmake \
            curl \
            libcurl4-openssl-dev \
            git

      - name: Configure CMake (Linux, g++)
        run: |
          cmake -B build -S . \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS_INIT="-static-libstdc++ -ffile-prefix-map=${{ github.workspace }}=. -fdebug-prefix-map=${{ github.workspace }}=. -fno-record-gcc-switches" \
            -DCMAKE_C_FLAGS_INIT="-ffile-prefix-map=${{ github.workspace }}=. -fdebug-prefix-map=${{ github.workspace }}=. -fno-record-gcc-switches"

      - name: Build (Linux)
        run: cmake --build build --config Release

      - name: Test (Linux)
        run: cd build && ctest --build-config Release

      - name: Upload binary artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: sommateur-linux-gcc
          path: build/sommateur*

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (macOS)
        run: brew install curl

      - name: Configure CMake (macOS)
        run: |
          cmake -B build -S . \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS_INIT="-ffile-prefix-map=${{ github.workspace }}=. -fdebug-prefix-map=${{ github.workspace }}=. -fno-record-gcc-switches" \
            -DCMAKE_C_FLAGS_INIT="-ffile-prefix-map=${{ github.workspace }}=. -fdebug-prefix-map=${{ github.workspace }}=. -fno-record-gcc-switches"

      - name: Build (macOS)
        run: cmake --build build --config Release

      - name: Test (macOS)
        run: cd build && ctest --build-config Release

      - name: Upload binary artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: sommateur-macos
          path: build/sommateur*

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install vcpkg (Windows)
        shell: cmd
        run: |
          if not exist "%GITHUB_WORKSPACE%\vcpkg" (
            git clone https://github.com/microsoft/vcpkg.git "%GITHUB_WORKSPACE%\vcpkg"
            call "%GITHUB_WORKSPACE%\vcpkg\bootstrap-vcpkg.bat"
          )

      - name: Install curl statically (Windows)
        shell: cmd
        run: |
          REM Install libcurl in static mode so that no DLL is required at runtime.
          "%GITHUB_WORKSPACE%\vcpkg\vcpkg.exe" install curl[winssl]:x64-windows-static

      - name: Configure CMake (Windows, static linking)
        shell: cmd
        run: |
          REM Use the static vcpkg triplet (x64-windows-static).
          REM Also set MSVC runtime library to MultiThreaded (/MT) for a fully self-contained exe.
          cmake -B "%GITHUB_WORKSPACE%\build" ^
            -DCMAKE_C_COMPILER=cl ^
            -DCMAKE_CXX_COMPILER=cl ^
            -DCMAKE_TOOLCHAIN_FILE="%GITHUB_WORKSPACE%\vcpkg\scripts\buildsystems\vcpkg.cmake" ^
            -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
            -S "%GITHUB_WORKSPACE%"

      - name: Build (Windows)
        shell: cmd
        run: cmake --build "%GITHUB_WORKSPACE%\build" --config Release

      - name: Test (Windows)
        shell: cmd
        run: |
          cd "%GITHUB_WORKSPACE%\build"
          ctest --build-config Release

      - name: Upload binary artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: sommateur-windows-latest
          path: |
            build\Release\sommateur.exe
            build\sommateur.exe
